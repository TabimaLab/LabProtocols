---
title: "Data Analysis"
output: html_notebook
---

```{r}
library(dada2)
library(Biostrings)
library(ShortRead)
```
## Starting info

Location of files:    mdelcogliano@smaug:~/Tabima_lab/raw_data/watershed/usftp21.novogene.com$

`zcat filename | head` will allow you to open the .gz file

read DADA2 tutorial

find the number of sequences in each file by grepping the name of the file prefaced by an @ symbol

resolution: can you figure out what is what?
  at a finer scale, the resolution of 16s is not as good as ITS bc it has to evolve much slower
  
"dont try to out-compete me on loving things" - Javier


### Listing the files

This code creates a list of the files that come from the illumina 
```{r}
path <- "/Tabima_lab/raw_data/watershed/fecal/usftp21.novogene.com/Rawdata" ## CHANGE ME to the directory containing the fastq file
list.files(path)

fnFs <- sort(list.files(path, pattern = "_1.fq.gz$", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_2.fq.gz$", full.names = TRUE))
```


```{r}
if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("Biostrings")
```


```{r}
FWD <- "GGAAGTAAAAGTCGTAACAAGG"
REV <- "GCTGCGTTCTTCATCGATGC"

allOrients <- function(primer) {
  # Create all orientations of the input sequence
  require(Biostrings)
  dna <- DNAString(primer) # The Biostrings works w DNAString objects rather than character vectors
  orients <- c(Forward = dna, Complement = complement(dna), Reverse = reverse(dna),
      RevComp = reverseComplement(dna))
  return(sapply(orients, toString)) # Convert back to character vector
}

FWD.orients <- allOrients(FWD)
REV.orients <- allOrients(REV)

FWD.orients
```

```{r}
fnFs.filtN <- file.path(path, "filtN", basename(fnFs)) # Put N-filterd files in filtN/ subdirectory
fnRs.filtN <- file.path(path, "filtN", basename(fnRs))
#filterAndTrim(fnFs, fnFs.filtN, fnRs, fnRs.filtN, maxN = 0, multithread = TRUE)
```
# Step 4. Counting and removing primers
```{r}
primerHits <- function(primer, fn) {
    # Counts number of reads in which the primer is found
    nhits <- vcountPattern(primer, sread(readFastq(fn)), fixed = FALSE)
    return(sum(nhits > 0))
}
#rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.filtN[[1]]),
#    FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.filtN[[1]]),
#    REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.filtN[[1]]),
#    REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.filtN[[1]]))
cutadapt <- "/usr/bin/cutadapt" # CHANGE ME to the cutadapt path on your machine
path.cut <- file.path(path, "cutadapt")
if(!dir.exists(path.cut)) dir.create(path.cut)
fnFs.cut <- file.path(path.cut, basename(fnFs))
fnRs.cut <- file.path(path.cut, basename(fnRs))
FWD.RC <- dada2:::rc(FWD)
REV.RC <- dada2:::rc(REV)
# Trim FWD and the reverse-complement of REV off of R1 (forward reads)
R1.flags <- paste("-g", FWD, "-a", REV.RC)
# Trim REV and the reverse-complement of FWD off of R2 (reverse reads)
R2.flags <- paste("-G", REV, "-A", FWD.RC)
```
The next step is different than in the guide. The idea is to send all the jobs to the cluster for them to execute in the background:
```{r, eval=FALSE}
for(i in seq_along(fnFs)) {
  jobname <- basename(fnFs[i]) %>% gsub(pattern = "_.+", replacement = "_cutadapt", perl = T)
  cut.sh <- paste(cutadapt, R1.flags, R2.flags, "-n", 2, # -n 2 required to remove FWD and REV from reads
                             "-o", fnFs.cut[i], "-p", fnRs.cut[i], # output files
                             fnFs.filtN[i], fnRs.filtN[i])
system(paste('sbatch -J', jobname ,'--wrap "', cut.sh , '"'))
}
rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.cut[[1]]),
    FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.cut[[1]]),
    REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.cut[[1]]),
    REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.cut[[1]]))
```