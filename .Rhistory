if(length(p.soluble) == 0 ){
p.soluble <- NA
}
return(tibble("Site"=client[1], "Location"=client[2], coli, solids, n.ammonia, n.nitrate, p.total, p.soluble))
}
june.results <- lapply(out1, data_process) %>% do.call(rbind, .) %>% tibble %>% mutate(across(c("coli":"p.soluble"), as.numeric))
june.results[is.na(june.results)] <- 0
aug.results <- lapply(august, data_process) %>% do.call(rbind, .) %>% tibble %>% mutate(across(c("coli":"p.soluble"), as.numeric))
june.results$Site[june.results$Site %in% "MB1"] <- "MR1_1"
june.results$Site[june.results$Site %in% "MR1"] <- "MB1"
june.results$Site[june.results$Site %in% "MR1_1"] <- "MR1"
june.results <- june.results[!june.results$Site %in% c("CP6E", "CR4", "GI3S", "MB2", "PR7B"), ]
aug.results <- aug.results[!aug.results$Site %in% c("BB4", "MB3"), ]
june.results <- june.results[grep(pattern = "D$", x = june.results$Site, invert = T),]
june.results$Site <- gsub(pattern = "S$", replacement = "", x = june.results$Site)
location_manning <- read.table("location_list", sep = "\t", row.names = NULL, header = T)
location_manning <- read.table("~/Tabima_lab/lab_data/Water_nutrients/location_list", sep = "\t", row.names = NULL, header = T)
june.results <- merge(location_manning, june.results, all.y = T, by = "Site")
june.results <- subset(june.results, select=-Location)
aug.results <- merge(location_manning, aug.results, all.y = T, by = "Site")
aug.results <- subset(aug.results, select=-Location)
june.results$month <- "June2022"
aug.results$month <- "August2022"
all_data <- rbind(june.results, aug.results) %>% tibble
saveRDS(all_data,file = "all_data.rds")
all_data
all_data <- readRDS("all_data.rds")
all_data
`print(n = ...length(23)`
`print(n = ...)`
`print(n = 23)`
`print(n = [...])`
autoplot(june.pca.res, data = june.final, colour = 'Site_type',
loadings = TRUE, loadings.colour = 'black',
loadings.label = TRUE, loadings.label.size = 3, shape = FALSE, label.size = 3,  frame = TRUE, frame.type = 't')  + theme_bw() + scale_color_viridis(discrete = T, option = "C", begin = 0.5, end = 0.8) + scale_fill_viridis(discrete = T, option = "C", begin = 0.5, end = 0.8)
library(geosphere)
dist.place <- vector()
for (i in 1:nrow(june.final)){
lon <- as.vector(june.final[i, 4]) %>% unlist %>% unname
lat <- as.vector(june.final[i, 3]) %>% unlist %>% unname
dist.mat <- distm(c(-71.86054, 42.29723), c(lon, lat) , fun = distHaversine)
dist.place[i] <- as.vector(dist.mat)
}
all_data <- readRDS("all_data.rds")
all_june <- all_data[all_data$month %in% "June2022",]
june.final <- subset(all_june, select = -p.soluble)
chloro_geo <- read.table("chloro_geo.txt", sep = "\t", header = T)
june.final <- merge(chloro_geo, june.final, by = "Site")
library(geosphere)
dist.place <- vector()
for (i in 1:nrow(june.final)){
lon <- as.vector(june.final[i, 4]) %>% unlist %>% unname
lat <- as.vector(june.final[i, 3]) %>% unlist %>% unname
dist.mat <- distm(c(-71.86054, 42.29723), c(lon, lat) , fun = distHaversine)
dist.place[i] <- as.vector(dist.mat)
}
june.final <- data.frame(june.final, dist.place)
june.final
rownames(june.final) <- june.final$Site
june.pca <- june.final[,c(2,7:11)]
# DOING PCA
june.pca.res <- prcomp(june.pca, scale = T)
june.pca.res$rotation <- -1*june.pca.res$rotation
autoplot(june.pca.res, data = june.final, colour = 'Site_type',
loadings = TRUE, loadings.colour = 'black',
loadings.label = TRUE, loadings.label.size = 3, shape = FALSE, label.size = 3,  frame = TRUE, frame.type = 't')  + theme_bw() + scale_color_viridis(discrete = T, option = "C", begin = 0.5, end = 0.8) + scale_fill_viridis(discrete = T, option = "C", begin = 0.5, end = 0.8)
autoplot(june.pca.res, data = june.final, colour = 'dist.place',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, shape = FALSE, label.size = 3) + theme_bw()
autoplot(june.pca.res, data = june.final, colour = 'dist.place',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, shape = FALSE, label.size = 3) + theme_bw()
rownames(june.final) <- june.final$Site
june.pca <- june.final[,c(2,7:11)]
# DOING PCA
june.pca.res <- prcomp(june.pca, scale = T)
june.pca.res$rotation <- -1*june.pca.res$rotation
autoplot(june.pca.res, data = june.final, colour = 'Site_type',
loadings = TRUE, loadings.colour = 'black',
loadings.label = TRUE, loadings.label.size = 3, shape = FALSE, label.size = 3,  frame = TRUE, frame.type = 't')  + theme_bw() + scale_color_viridis(discrete = T, option = "C", begin = 0.5, end = 0.8) + scale_fill_viridis(discrete = T, option = "C", begin = 0.5, end = 0.8)
june_c <- scale(june.final[,c(2,7:11)])
# PerMANOVA - partitioning the euclidean distance matrix by species
library(vegan)
autoplot(june.pca.res, data = june.final, colour = 'dist.place',
loadings = TRUE, loadings.colour = 'grey',
loadings.label = TRUE, loadings.label.size = 3, shape = FALSE, label.size = 3) + theme_bw() + scale_color_viridis(discrete = F, option = "C") + guides(fill=guide_legend(title="New Legend Title"))
autoplot(june.pca.res, data = june.final, colour = 'LocManning',
loadings = TRUE, loadings.colour = 'grey',
loadings.label = TRUE, loadings.label.size = 3, shape = FALSE, label.size = 3)  + theme_bw() + scale_color_viridis(discrete = T, option = "D")
adonis2(june_c ~ LocManning, data = june.final, method='eu')
library(ggmap)
library(leaflet)
my_location <- c(lon=-71.82, lat=42.263)
register_google(key = "AIzaSyA6ZILUoqkjcQAD8-GjdFIuzIFjA4ZPmlU")
myMap <- get_map(location=my_location, source="stamen", maptype="terrain", crop=FALSE, zoom = 13)
ggmap(myMap, darken = c(0.4, "white")) +
geom_label(data=june.final, aes(x=Longitude, y=Latitude, label=Site, fill=LocManning), fontface = "bold", colour = "white") + scale_fill_viridis(discrete = T, option = "D", end = 0.9)
install.packages("vegan")
adonis2(june_c ~ dist.place, data = june.final, method='eu')
june_c <- scale(june.final[,c(2,7:11)])
# PerMANOVA - partitioning the euclidean distance matrix by species
library(vegan)
adonis2(june_c ~ Site_type, data = june.final, method='eu')
adonis2(june_c ~ dist.place, data = june.final, method='eu')
autoplot(june.pca.res, data = june.final, colour = 'LocManning',
loadings = TRUE, loadings.colour = 'grey',
loadings.label = TRUE, loadings.label.size = 3, shape = FALSE, label.size = 3)  + theme_bw() + scale_color_viridis(discrete = T, option = "D")
adonis2(june_c ~ LocManning, data = june.final, method='eu')
library(pdftools)
install.packages("pdftools")
library(pdftools)
pdf_subset('mdelcogliano/Zoning/zoning-ord.pdf',
pages = 32:33, output = "zoning-key.pdf")
pdf_subset('mdelcogliano/Zoning/zoning-ord.pdf', TRUE pages = 32:33, output = "zoning-key.pdf")
pdf_data(zoning-ord.pdf)
pdf_data(Tabima_lab/homes/mdelcogliano/Zoning/zoning-ord.pdf)
pdf_data(pdf = Tabima_lab/homes/mdelcogliano/Zoning/zoning-ord.pdf)
pdf_data(pdf = zoning-ord.pdf)
mkdir (Protocols)
install.packages("installr")\
install.packages("installr")
library(installr)
updateR()
updateR()
6*7
6*7
setwd("~/Tabima_lab/documents_and_protocols/lab_notebook")
setwd("~/Tabima_lab/homes/mdelcogliano/biostats")
6*7
(2021-1660)/100
(2021-1660)/10
a
4^3*8 -> a
a
a
a
a
rm(a)
a
?rm()
10:100 -> x
x
y <- 5+2*x
y
plot(x,y)
plot(x,y,type="1")
plot(x,y,type="l")
y <- 1/x
plot(x,y,type="l")
plot(x,1/y)
y <- 20^x
y
curve(9/(5*x), from=10, to=100)
y <- 5*x^2
curve(5*x^2.5, from=0, to=10, add=TRUE)
y <- 5*x^2
curve(5*x^2.5, from=0, to=10, add=TRUE)
curve(5*x^2, from=0, to=10)
curve(5*x^2.5, from=0, to=10, add=TRUE)
curve(5*x^2, from=0, to=10)
curve(5*x^2.5, from=-30, to=10, add=TRUE)
curve(5*x^2, from=0, to=10)
curve(5*x^2.5, from=0, to=10, add=TRUE)
curve(9/2^x, from=0, to=10, add=TRUE)
curve(5*x^2, from=0, to=10)
curve(5*x^2.5, from=0, to=10, add=TRUE)
curve(2^x/9, from=0, to=10, add=TRUE)
rm(x)
rm(y)
```
grep "gene" Syn_WH101.cds.fasta
```
data_process <- function (x) {
client <- x[grep(pattern = "Client ID|Location", x = x[,1]),1] %>% gsub(pattern = "Client ID: |Sample Location: ", replacement = "")
coli <- x[grep(pattern = "Coli", x = x[,1]),1] %>%  gsub(pattern = ".+\\) ", replacement = "")
solids <-  x[grep(pattern = "Solids", x = x[,1]),1] %>% gsub(pattern = ".+ ", replacement = "")
n.ammonia <-  x[grep(pattern = "Ammonia", x = x[,1]),1] %>% gsub(pattern = ".+ ", replacement = "")
n.nitrate <- x[grep(pattern = "Nitrate", x = x[,1]),1] %>% gsub(pattern = ".+ ", replacement = "")
p.total <-  x[grep(pattern = "Phosphorus, Total", x = x[,1]),1] %>% gsub(pattern = ".+ ", replacement = "")
p.soluble <-  x[grep(pattern = "Soluble", x = x[,1]),1] %>% gsub(pattern = ".+ ", replacement = "")
return(data.frame("Site"=client[1], "Location"=client[2], coli, solids, n.ammonia, n.nitrate, p.total, p.soluble))
}
install.packages("Hmisc"
install.packages("Hmisc")
install.packages("Hmisc")
install.packages("ggplot2")
install.packages("ggplot2")
SockeyeFemaleBodyMass <- read.csv("SockeyeFemaleBodyMass.csv")
View(data_process)
View(data_process)
SockeyeFemaleBodyMass <- read.csv("SockeyeFemaleBodyMass.csv")
head(SockeyeFemaleBodyMass)
str(SockeyeFemaleBodyMass)
ggplot(SockeyeFemaleBodyMass, aes(massKg)) + geom_histogram()
ggplot(SockeyeFemaleBodyMass, aes(massKg)) + geom_histogram(binwidth=0.6)
ggplot(SockeyeFemaleBodyMass, aes(massKg)) + geom_histogram(binwidth=0.05)
SockeyeFemaleBodyMass$massKg
range(SockeyeFemaleBodyMass$massKg)
massrange
massrange <- 3.528 - 1.18
massrange
I = 1 + log(228)/log(2)
I
massrange/I
ggplot(SockeyeFemaleBodyMass, aes(massKg)) + geom_histogram(binwidth=0.27)
I = 2*228^(1/3)
I
RiceI = 2*228^(1/3)
RiceI
massrange/RiceI
ggplot(SockeyeFemaleBodyMass, aes(massKg)) + geom_histogram(binwidth=0.19)
plates.data <- read.csv("StickelbackPlates.csv")
plates.data <- read.csv("SticklebackPlates.csv")
plates.data <- read.csv("SticklebackPlates.csv")
plates.data
rn(plates.data)
rm(plates.data)
plates.data <- read.csv("SticklebackPlates.csv")
plates.data
head(plates.data)
plates.data <- read.csv("SticklebackPlates.csv")
plates.data
ggplot(plates.data, aes(x=Genotype, y=Plates)) + geom_bar(stat="identity")
ggplot(plates.data, aes(x=Genotype, y=Plates)) + geom_bar(stat="identity")+ theme(axis.text.x = element_text(size=10), axis.text.y= element_text(size=10), axis.title.x= element_text(size=25), axis.title.y= element_text(size=25))
ggplot(plates.data, aes(x=Genotype, y=Plates)) + geom_bar(stat="identity")+ theme(axis.text.x = element_text(size=8), axis.text.y= element_text(size=8), axis.title.x= element_text(size=25), axis.title.y= element_text(size=25)) + ylab("Number of Lateral Plates")
ggplot(plates.data, aes(x=Genotype, y=Plates)) + geom_bar(stat="identity")+ theme(axis.text.x = element_text(size=8), axis.text.y= element_text(size=8), axis.title.x= element_text(size=15), axis.title.y= element_text(size=15)) + ylab("Number of Lateral Plates")
ggplot(plates.data, aes(x=Genotype, y=Plates)) + geom_bar(stat="identity")+ theme(axis.text.x = element_text(size=10), axis.text.y= element_text(size=10), axis.title.x= element_text(size=15), axis.title.y= element_text(size=15)) + ylab("Number of Lateral Plates")
ggplot(data = SpiderAmputations, aes(x = amp_status, y = speed)) + geom_point()
ggplot(data = SpiderAmputations, aes(x = amp_status, y = speed)) + geom_point()
ggplot(data = SpiderAmputations.csv, aes(x = amp_status, y = speed)) + geom_point()
ggplot(data = SpiderAmputations.csv, aes(x = amp_status, y = speed)) + geom_point()
ggplot(data = SpiderAmputations, aes(x = amp_status, y = speed)) + geom_point()
ggplot(data = SpiderAmputations, aes(x = amp_status, y = speed)) + geom_point()
SpiderAmputations <- read_csv(SpiderAmputations)
SpiderAmputations <- read.csv("SpiderAmputations.csv")
ChocolateNobels <- read_csv("ChocolateNobels.csv")
ggplot(data = SpiderAmputations, aes(x = amp_status, y = speed)) + geom_point()
ggplot(data = SpiderAmputations, aes(x = amp_status, y = speed)) + geom_jitter(width = x, height = x)
ggplot(data = SpiderAmputations, aes(x = amp_status, y = speed)) + geom_jitter(width = x, height = x)
ggplot(data = SpiderAmputations, aes(x = amp_status, y = speed)) + geom_jitter(width = .1, height = 0)
Skipped a bunch of steps to get to:
ggplot(data = SpiderAmputations, aes(x = amp_status, y = speed)) + geom_jitter(width = .1, height = 0)
ggplot(data = ChocolateNobels, aes(x = amp_status, y = speed)) + geom_jitter(width = .1, height = 0)
ggplot(data = ChocolateNobels, aes(x = amp_status, y = speed)) + geom_jitter(width = .1, height = 0)
ggplot(data = ChocolateNobels, aes(x = amp_status, y = speed)) + geom_jitter(width = .1, height = 0)
ggplot(data = SpiderAmputations, aes(x = amp_status, y = speed)) + geom_jitter(width = .1, height = 0)
ggplot(data = ChocolateNobels, aes(x = Chocolate, y = Number of Nobels)) + geom_jitter(width = .1, height = 0)
ggplot(data = ChocolateNobels, aes(x = Chocolate, y = Number of Nobels)) + geom_jitter(width = .1, height = 0)
ggplot(data = ChocolateNobels, aes(x = Chocolate, y = Number_of_Nobels)) + geom_jitter(width = .1, height = 0)
ggplot(data = ChocolateNobels, aes(x = chocolate, y = Number_of_Nobels)) + geom_jitter(width = .1, height = 0)
View(ChocolateNobels)
ggplot(data = ChocolateNobels, aes(x = chocolateconsuption, y = nobelPrizes(per 100 million))) + geom_jitter(width = .1, height = 0)
ggplot(data = ChocolateNobels, aes(x = chocolateconsuption, y = nobelPrizes)) + geom_jitter(width = .1, height = 0)
ggplot(data = ChocolateNobels, aes(x = chocolate, y = number_of_nobels)) + geom_jitter(width = .1, height = 0)
View(SpiderAmputations)
ggplot(data = ChocolateNobels, aes(x = chocolateConsuption, y = nobelPrizes(per 100 million))) + geom_jitter(width = .1, height = 0)
View(ChocolateNobels)
ggplot(data = ChocolateNobels, aes(x = chocolateConsuption, y = nobelPrizes)) + geom_jitter(width = .1, height = 0)
View(ChocolateNobels)
View(SpiderAmputations)
ggplot(data = ChocolateNobels, aes(x = chocolateConsuption, y = nobelPrizes)) + geom_jitter(width = .1, height = 0)
ggplot(data = ChocolateNobels, aes(x = chocolate, y = number_of_nobels)) + geom_jitter(width = .1, height = 0)
g
ggplot(data = ChocolateNobels, aes(x = chocolateConsuption, y = number_of_nobels)) + geom_jitter(width = .1, height = 0)
ggplot(data = ChocolateNobels, aes(x = chocolateConsuption, y = nobelPrizes)) + geom_jitter(width = .1, height = 0)
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes)) + geom_jitter(width = .1, height = 0)
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes(per 100 million))) + geom_jitter(width = .1, height = 0)
View(ChocolateNobels)
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes)) + geom_jitter(width = .1, height = 0)
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes(per 100 million))) + geom_jitter(width = .1, height = 0)
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes(per 100 million))) + geom_jitter(width = .1, height = 0)
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes(per)) + geom_jitter(width = .1, height = 0)
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes(per)) + geom_jitter(width = .1, height = 0)
+ geom_jitter(width = .1, height = 0)
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes) + geom_jitter(width = .1, height = 0)
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes) + geom_jitter(width = .1, height = 0)
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes) + geom_jitter(width = .1, height = 0))
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes) + geom_jitter(width = .1, height = 0)
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes)) + geom_jitter(width = .1, height = 0))
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes)) + geom_jitter()
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes.per.100.million)) + geom_point()
ggplot(data=ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes.per.100.million)) + geom_jitter()
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes.per.100.million)) + geom_point()
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes.per.100.million)) + geom_point()
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes_per_100_million)) + geom_point()
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes.per.100.million.)) + geom_point()
ggplot(data = ChocolateNobels, aes(x=chocolateConsumption, y=nobelPrizes.per.100.million.)) + geom_point()
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes.per.100.million)) + geom_point()
View(ChocolateNobels)
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes.per.100.million.)) + geom_point()
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = country)) + geom_point()
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes.per.100.million.)) + geom_point()
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes.per.100.million.)) + geom_point()
View(ChocolateNobels)
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes(per 100 million)) + geom_point()
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes.per.100.million.)) + geom_point()
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes)) + geom_point()
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes)) + geom_point()
nobelPrizes > nobelPrizes
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes)) + geom_point()
View(ChocolateNobels)
View(ChocolateNobels)
View(ChocolateNobels)
View(ChocolateNobels)
rm(ChocolateNobels)
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes)) + geom_point()
ChocolateNobels <- read.csv(ChocolateNobels.csv)
ChocolateNobels <- read_csv(ChocolateNobels)
ChocolateNobels <- read_csv(ChocolateNobels.csv)
ChocolateNobels <- read.csv("ChocolateNobels.csv")
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = nobelPrizes)) + geom_point()
View(ChocolateNobels)
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = NobelPrizes)) + geom_point()
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = NobelPrizes)) + geom_point(aes(colour = factor(continent)))
save.image("~/biostats/Lab_2.RData")
ggplot(data = ChocolateNobels, aes(x = chocolateConsumption, y = NobelPrizes)) + geom_point(aes(colour = factor(continent))) + theme_classic( )
rm
load("~/biostats/Lab_2.RData")
mass <- SockeyeFemaleBodyMass$massKg
mass
mass
massmean <- mean(mass)
massmean
sqrt(sum(((mass-massmean)^2)/227))
View(SockeyeFemaleBodyMass)
length
sd(length)
length
sd(length)
library(ggplot2)
library(Hmisc)
sd(length)
sd(length)
library(Hmisc)
length
length <- SockeyeFemaleBodyMass$lengthMm
length
sd(length)
var(length)
sd(mass)
var(mass)
IQR(mass)
median(mass)
(sd(mass))/(sqrt(length(mass)))
standard_error <- (sd(mass))/(sqrt(length(mass)))
standard_error
se <- function(mass){sd(mass)/sqrt(length(mass))}
se(mass)
se <- function(x){sd(mass)/sqrt(length(mass))}
se(mass)
(se(mass)*2) + massmean
(se(mass)*2) - massmean
massmean - (se(mass)*2)
sort(mass)[qbinom(c(.025,.975), length(mass), 0.5)]
SticklebackPlates <- read.csv('SticklebackPlates.csv')
View(plates.data)
str(SticklebackPlates)
mean(SticklebackPlates$Plates)
aggregate(SticklebackPlates$Plates,list(Genotype = SticklebackPlates$Genotype),mean)
aggregate(SticklebackPlates$Plates,list(Genotype = SticklebackPlates$Genotype),sd)
aggregate(SticklebackPlates$Plates,list(Genotype = SticklebackPlates$Genotype),median)
aggregate(SticklebackPlates$Plates,list(Genotype = SticklebackPlates$Genotype),IQR)
aggregate(SticklebackPlates$Plates,list(Genotype = SticklebackPlates$Genotype),se)
ggplot(SticklebackPlates, aes(x=Plates)) + geom_histogram() + theme_classic()
ggplot(SticklebackPlates, aes(x=Plates)) + geom_histogram() + theme_classic() +facet_grid(Genotype~.)
FUN <- function(x)c(avg=mean(x),med=median(x),inter.quart.range=IQR(x),std.err=se(x),CI=se(x)*2,std.dev=sd(x))
aggregate(SticklebackPlates$Plates,list(Genotype = SticklebackPlates$Genotype),FUN)
aggregate(SticklebackPlates$Plates,list(Genotype = SticklebackPlates$Genotype),FUN)
stickleback.summary <- aggregate(SticklebackPlates$Plates,list(Genotype = SticklebackPlates$Genotype),FUN)
stickleback.summary
FUN(mass)
FUN
stickleback.summary
FUN <- function(x) {c(avg=mean(x),med=median(x),inter.quart.range=IQR(x),std.err=se(x),CI=se(x)*2,std.dev=sd(x))}
stickleback.summary <- aggregate(SticklebackPlates$Plates,list(Genotype = SticklebackPlates$Genotype),FUN)
stickleback.summary
View(SticklebackPlates)
se <- function(mass){sd(mass)/sqrt(length(mass))}
FUN <- function(x)c(avg=mean(x),med=median(x),inter.quart.range=IQR(x),std.err=se(x),CI=se(x)*2,std.dev=sd(x))
stickleback.summary <- aggregate(SticklebackPlates$Plates,list(Genotype = SticklebackPlates$Genotype),FUN)
stickleback.summary
stickleback.summary
stickleback.summary <- aggregate(SticklebackPlates$Plates,list(Genotype = SticklebackPlates$Genotype),FUN)
stickleback.summary
stickleback.summary <- do.call(data.frame,stickleback.summary)
stickleback.summary <- do.call(data.frame,stickleback.summary)
colnames(stickleback.summary)[2:7] <- c(“plate.avg”, “plate.median”, “inter.quart.range”, “std.err”, “CI”, “std.dev”)
stickleback.summary
colnames(stickleback.summary)[2:7] <- c('plate.avg', 'plate.median', 'inter.quart.range', 'std.err', 'CI', 'std.dev')
stickleback.summary
colnames(stickleback.summary)[2:7] <- c('plate.avg', 'plate.median', 'inter.quart.range', 'std.err', 'CI', 'std.dev')
ggplot(stickleback.summary,aes(x=Genotype,y=plate.avg))+geom_errorbar(aes(ymin=plate.avg-std.dev, ymax=plate.avg+std.dev))+geom_point(size=3)
ggplot(stickleback.summary,aes(x=Genotype,y=plate.avg))+geom_errorbar(aes(ymin=std.err-plate.avg, ymax=plate.avg+std.err))+geom_point(size=3)
ggplot(stickleback.summary,aes(x=Genotype,y=plate.avg))+geom_errorbar(aes(ymin=plate.avg-std.dev, ymax=plate.avg+std.dev))+geom_point(size=3)
ggplot(stickleback.summary,aes(x=Genotype,y=plate.avg))+geom_errorbar(aes(ymin=plate.avg-std.dev, ymax=plate.avg+std.dev))+geom_point(size=3)
ggplot(stickleback.summary,aes(x=Genotype,y=plate.avg))+geom_errorbar(aes(ymin=plate.avg-std.dev, ymax=plate.avg+std.dev))+geom_point(size=3)
rm(plates.data)
library(dada2)
install.packages('dada2')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dada2", version = "3.16")
library(dada2)
library(dada2)
library(Biostrings)
path <- "/Tabima_lab/raw_data/watershed/fecal/usftp21.novogene.com$" ## CHANGE ME to the directory containing the fastq file
save.image("~/biostats/Lab_3.RData")
path <- "/Tabima_lab/raw_data/watershed/fecal/usftp21.novogene.com$" ## CHANGE ME to the directory containing the fastq file
path <- "/Tabima_lab/raw_data/watershed/fecal/usftp21.novogene.com$" ## CHANGE ME to the directory containing the fastq file
list.files(path)
path <- "/Tabima_lab/raw_data/watershed/fecal/usftp21.novogene.com$" ## CHANGE ME to the directory containing the fastq file
list.files(path)
path <- "/Tabima_lab/raw_data/watershed/fecal/usftp21.novogene.com$" ## CHANGE ME to the directory containing the fastq file
list.files(path)
path <- "/Tabima_lab/raw_data/watershed/usftp21.novogene.com/Rawdata" ## CHANGE ME to the directory containing the fastq file
list.files(path)
path <- "/Tabima_lab/raw_data/watershed/fecal/usftp21.novogene.com/Rawdata" ## CHANGE ME to the directory containing the fastq file
list.files(path)
path <- "/Tabima_lab/raw_data/watershed/fecal/usftp21.novogene.com/Rawdata" ## CHANGE ME to the directory containing the fastq file
list.files(path)
fnFs <- sort(list.files(path, pattern = "_1.fq.gz$", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_2.fq.gz$", full.names = TRUE))
path <- "/Tabima_lab/raw_data/watershed/fecal/usftp21.novogene.com/Rawdata" ## CHANGE ME to the directory containing the fastq file
list.files(path)
fnFs <- sort(list.files(path, pattern = "_1.fq.gz$", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_2.fq.gz$", full.names = TRUE))
path <- "/Tabima_lab/raw_data/watershed/fecal/usftp21.novogene.com/Rawdata" ## CHANGE ME to the directory containing the fastq file
list.files(path)
fnFs <- sort(list.files(path, pattern = "_1.fq.gz$", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_2.fq.gz$", full.names = TRUE))
path <- "/Tabima_lab/raw_data/watershed/fecal/usftp21.novogene.com/Rawdata" ## CHANGE ME to the directory containing the fastq file
list.files(path)
fnFs <- sort(list.files(path, pattern = "_1.fq.gz$", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_2.fq.gz$", full.names = TRUE))
head(fnFs)
library(dada2)
library(Biostrings)
library(ShortRead)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
FWD.orients <- allOrients(FWD)
FWD <- "GGAAGTAAAAGTCGTAACAAGG"
REV <- "GCTGCGTTCTTCATCGATGC"
allOrients <- function(primer) {
# Create all orientations of the input sequence
require(Biostrings)
dna <- DNAString(primer) # The Biostrings works w DNAString objects rather than character vectors
orients <- c(Forward = dna, Complement = complement(dna), Reverse = reverse(dna),
RevComp = reverseComplement(dna))
return(sapply(orients, toString)) # Convert back to character vector
}
FWD.orients <- allOrients(FWD)
REV.orients <- allOrient(REV)
FWD <- "GGAAGTAAAAGTCGTAACAAGG"
REV <- "GCTGCGTTCTTCATCGATGC"
allOrients <- function(primer) {
# Create all orientations of the input sequence
require(Biostrings)
dna <- DNAString(primer) # The Biostrings works w DNAString objects rather than character vectors
orients <- c(Forward = dna, Complement = complement(dna), Reverse = reverse(dna),
RevComp = reverseComplement(dna))
return(sapply(orients, toString)) # Convert back to character vector
}
FWD.orients <- allOrients(FWD)
REV.orients <- allOrients(REV)
FWD.orients
library(tidyverse)
load("~/biostats/Lab_3.RData")
ggplot(stickleback.summary,aes(x=Genotype,y=plate.avg))+geom_errorbar(aes(ymin=plate.avg-std.dev, ymax=plate.avg+std.dev))+geom_point(size=3)
ggplot(stickleback.summary,aes(x=Genotype,y=plate.avg))+geom_errorbar(aes(ymin=plate.avg-2.099539, ymax=plate.avg+1.956794))+geom_point(size=3)
ggplot(stickleback.summary,aes(x=Genotype,y=plate.avg))+geom_errorbar(aes(ymin=plate.avg-(massmean + (se(mass*2))), ymax=plate.avg+(massmean - (se(mass)*2))))+geom_point(size=3)
ggplot(stickleback.summary,aes(x=Genotype,y=plate.avg))+geom_errorbar(aes(ymin=plate.avg-2.099539, ymax=plate.avg+1.956794))+geom_point(size=3)
ggplot(stickleback.summary,aes(x=Genotype,y=plate.avg))+geom_errorbar(aes(ymin=plate.avg-(massmean + (se(mass*2))), ymax=plate.avg+(massmean - (se(mass)*2))))+geom_point(size=3)
ggplot(stickleback.summary,aes(x=Genotype,y=plate.avg))+geom_errorbar(aes(ymin=plate.avg-2.099539, ymax=plate.avg+1.956794))+geom_point(size=3)
ggplot(stickleback.summary,aes(x=Genotype,y=plate.avg))+geom_errorbar(aes(ymin=plate.avg-(massmean + (se(mass*2))), ymax=plate.avg+(massmean - (se(mass)*2))))+geom_point(size=3)
ggplot(stickleback.summary,aes(x=Genotype,y=Number of Lateral Plates))+geom_errorbar(aes(ymin=plate.avg-(massmean + (se(mass*2))), ymax=plate.avg+(massmean - (se(mass)*2))))+geom_point(size=3)
ggplot(stickleback.summary,aes(x=Genotype,y=#_of_Lateral_Plates))+geom_errorbar(aes(ymin=plate.avg-(massmean + (se(mass*2))), ymax=plate.avg+(massmean - (se(mass)*2))))+geom_point(size=3)
ggplot(stickleback.summary,aes(x=Genotype,y=#_of_Lateral_Plates))+geom_errorbar(aes(ymin=plate.avg-(massmean + (se(mass*2))), ymax=plate.avg+(massmean - (se(mass)*2))))+geom_point(size=3)
ggplot(stickleback.summary,aes(x=Genotype,y=#_of_Lateral_Plates))+geom_errorbar(aes(ymin=plate.avg-(massmean + (se(mass*2))), ymax=plate.avg+(massmean - (se(mass)*2))))+geom_point(size=3)
ggplot(stickleback.summary,aes(x=Genotype,y=Number_of_Lateral_Plates))+geom_errorbar(aes(ymin=plate.avg-(massmean + (se(mass*2))), ymax=plate.avg+(massmean - (se(mass)*2))))+geom_point(size=3)
ggplot(stickleback.summary,aes(x=Genotype,y=Number_of_Lateral_Plates))+geom_errorbar(aes(ymin=plate.avg-(massmean + (se(mass*2))), ymax=plate.avg+(massmean - (se(mass)*2))))+geom_point(size=3)
ggplot(stickleback.summary,aes(x=Genotype,y=Number_Plates))+geom_errorbar(aes(ymin=plate.avg-(massmean + (se(mass*2))), ymax=plate.avg+(massmean - (se(mass)*2))))+geom_point(size=3)
ggplot(stickleback.summary,aes(x=Genotype,y=plate.avg))+geom_errorbar(aes(ymin=plate.avg-(massmean + (se(mass*2))), ymax=plate.avg+(massmean - (se(mass)*2))))+geom_point(size=3) +theme_classic()
ggplot(stickleback.summary,aes(x=Genotype,y=plate.avg))+geom_errorbar(aes(ymin=plate.avg-(massmean + (se(mass*2))), ymax=plate.avg+(massmean - (se(mass)*2))))+geom_point(size=3) +theme_bw()
ggplot(stickleback.summary,aes(x=Genotype,y=plate.avg))+geom_errorbar(aes(ymin=plate.avg-(massmean + (se(mass*2))), ymax=plate.avg+(massmean - (se(mass)*2))))+geom_point(size=3) + theme_dark()
ggplot(stickleback.summary,aes(x=Genotype,y=plate.avg))+geom_errorbar(aes(ymin=plate.avg-(massmean + (se(mass*2))), ymax=plate.avg+(massmean - (se(mass)*2))))+geom_point(size=3) + theme_linedraw()
ggplot(stickleback.summary,aes(x=Genotype,y=plate.avg))+geom_errorbar(aes(ymin=plate.avg-(massmean + (se(mass*2))), ymax=plate.avg+(massmean - (se(mass)*2))))+geom_point(size=3) + theme_void()
ggplot(stickleback.summary,aes(x=Genotype,y=plate.avg))+geom_errorbar(aes(ymin=plate.avg-(massmean + (se(mass*2))), ymax=plate.avg+(massmean - (se(mass)*2))))+geom_point(size=3) + theme_inset()
ggplot(stickleback.summary,aes(x=Genotype,y=plate.avg))+geom_errorbar(aes(ymin=plate.avg-(massmean + (se(mass*2))), ymax=plate.avg+(massmean - (se(mass)*2))))+geom_point(size=3) + theme_set()
ggplot(stickleback.summary,aes(x=Genotype,y=plate.avg))+geom_errorbar(aes(ymin=plate.avg-(massmean + (se(mass*2))), ymax=plate.avg+(massmean - (se(mass)*2))))+geom_point(size=3) + theme_bw()
home
set_tidy_names(jome)
setwd(Home)
setwd
ls protocol
java -jar /Smaug_SSD/bin/Trimmomatic-0.39/trimmomatic-0.39.jar PE -threads 1 NBP03_S166_R1_001.fastq.gz NBP03_S166_R2_001.fastq.gz IlluminaTrim_R1.fastq.gz IlluminaTrim_R1.Unpaired.fastq.gz lluminaTrim_R2.fastq.gz lluminaTrim_R2.Unpaired.fastq.gz ILLUMINACLIP:/Smaug_SSD/bin/Trimmomatic-0.39/adapters/TruSeq3-PE.fa:2:30:10:2:True
java -jar /Smaug_SSD/bin/Trimmomatic-0.39/trimmomatic-0.39.jar PE -threads 1 NB0621_05_S166_R1_001.fastq.gz NB0621_05_S166_R2_001.fastq.gz IlluminaTrim_R1.fastq.gz IlluminaTrim_R1.Unpaired.fastq.gz lluminaTrim_R2.fastq.gz lluminaTrim_R2.Unpaired.fastq.gz ILLUMINACLIP:/Smaug_SSD/bin/Trimmomatic-0.39/adapters/TruSeq3-PE.fa:2:30:10:2:True
java-jar /Smaug_SSD/bin/Trimmomatic-0.39/trimmomatic-0.39.jar PE -threads 1 NB0621_05_S166_R1_001.fastq.gz NB0621_05_S166_R2_001.fastq.gz IlluminaTrim_R1.fastq.gz IlluminaTrim_R1.Unpaired.fastq.gz lluminaTrim_R2.fastq.gz lluminaTrim_R2.Unpaired.fastq.gz ILLUMINACLIP:/Smaug_SSD/bin/Trimmomatic-0.39/adapters/TruSeq3-PE.fa:2:30:10:2:True
java -jar /Smaug_SSD/bin/Trimmomatic-0.39/trimmomatic-0.39.jar PE -threads 1 NB0621_05_S166_R1_001.fastq.gz NB0621_05_S166_R2_001.fastq.gz IlluminaTrim_R1.fastq.gz IlluminaTrim_R1.Unpaired.fastq.gz lluminaTrim_R2.fastq.gz lluminaTrim_R2.Unpaired.fastq.gz ILLUMINACLIP:/Smaug_SSD/bin/Trimmomatic-0.39/adapters/TruSeq3-PE.fa:2:30:10:2:True
java -jar /Smaug_SSD/bin/Trimmomatic-0.39/ trimmomatic-0.39.jar PE -threads 1 NB0621_05_S166_R1_001.fastq.gz NB0621_05_S166_R2_001.fastq.gz IlluminaTrim_R1.fastq.gz IlluminaTrim_R1.Unpaired.fastq.gz lluminaTrim_R2.fastq.gz lluminaTrim_R2.Unpaired.fastq.gz ILLUMINACLIP:/Smaug_SSD/bin/Trimmomatic-0.39/adapters/TruSeq3-PE.fa:2:30:10:2:True
java -jar /Smaug_SSD/bin/Trimmomatic-0.39/trimmomatic-0.39.jar PE -threads 1 NB0621_05_S166_R1_001.fastq.gz NB0621_05_S166_R2_001.fastq.gz IlluminaTrim_R1.fastq.gz IlluminaTrim_R1.Unpaired.fastq.gz lluminaTrim_R2.fastq.gz lluminaTrim_R2.Unpaired.fastq.gz ILLUMINACLIP:/Smaug_SSD/bin/Trimmomatic-0.39/adapters/TruSeq3-PE.fa:2:30:10:2:True
library(dada2)
library(Biostrings)
library(ShortRead)
path <- "/Tabima_lab/raw_data/watershed/fecal/usftp21.novogene.com/Rawdata" ## CHANGE ME to the directory containing the fastq file
list.files(path)
fnFs <- sort(list.files(path, pattern = "_1.fq.gz$", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_2.fq.gz$", full.names = TRUE))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
